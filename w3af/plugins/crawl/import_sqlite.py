from w3af.core.controllers.plugins.crawl_plugin import CrawlPlugin
from w3af.core.controllers.exceptions import RunOnce, BaseFrameworkException
from w3af.core.controllers.misc.decorators import runonce
from w3af.core.data.request.fuzzable_request import FuzzableRequest
from w3af.core.data.options.opt_factory import opt_factory
from w3af.core.data.options.option_types import INPUT_FILE
from w3af.core.data.options.option_list import OptionList
import w3af.core.controllers.output_manager as om
from w3af.core.data.dc.headers import Headers
import sqlite3

class import_sqlite(CrawlPlugin):
    """
    Import requests (method,uri,headers,data) stored in sqlite database.
    :author: @s0i37
    """

    def __init__(self):
        CrawlPlugin.__init__(self)
        self._input_sqlite = ''

    @runonce(exc_class=RunOnce)
    def crawl(self, fuzzable_request):
        """
        Read the input file, and create the fuzzable_request_list based on that
        information.

        :param fuzzable_request: A fuzzable_request instance that contains
                                    (among other things) the URL to test.
                                    In this case it is simply ignored and data
                                    is read from the input files.
        """
        self._load_data_from_sqlite()
    

    def _load_data_from_sqlite(self):
        """
        Load data from the csv file
        """
        if not self._input_sqlite:
            return

        try:
            db = sqlite3.connect(self._input_sqlite)
        except BaseFrameworkException, e:
            msg = 'An error was found while trying to read "%s": "%s".'
            om.out.error(msg % (self._input_csv, e))
            return

        sql = db.cursor()

        for method,uri,headers,data in sql.execute("select method,uri,headers,data from requests"):
            try:
                self.debug( "+ %s %s" % (method,uri) )
                headers = Headers.from_string( str(headers) )
                self.output_queue.put(
                	FuzzableRequest.from_parts( uri, method=method, post_data=str(data), headers=headers )
                	)
            except Exception as e:
                import traceback
                traceback.print_exc()
                msg = 'import_sqlite: %s'
                self.debug( msg % str(e) )

        db.close()

    def debug(self, msg):
        om.out.debug( '[import_sqlite]: ' + str(msg) )

    def get_options(self):
        """
        :return: A list of option objects for this plugin.
        """
        ol = OptionList()

        d = 'Define the SQLITE input file from which to create the fuzzable requests'
        h = 'The input sqlite-file must contains table REQUESTS with follow schema:'
        h += ' requests(method text, uri text, headers text, data text)'
        o = opt_factory('input_sqlite', self._input_sqlite, d, INPUT_FILE, help=h)
        ol.add(o)

        return ol

    def set_options(self, options_list):
        """
        This method sets all the options that are configured using the user
        interface generated by the framework using the result of get_options().

        :param options_list: A dictionary with the options for the plugin.
        :return: No value is returned.
        """
        self._input_sqlite = options_list['input_sqlite'].get_value()

    def get_long_desc(self):
        """
        :return: A DETAILED description of the plugin functions and features.
        """
        return """
        This plugin serves as an entry point for the results of other tools that
        identify URLs. The plugin reads from different input files and directories
        and creates the fuzzable requests which are needed by the audit plugins.

        Two configurable parameter exist:
            - input_sqlite

        One or more of these need to be configured in order for this plugin to
        yield any results.
        """